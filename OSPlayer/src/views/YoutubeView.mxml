<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:ytfeeds="ytfeeds.*" title="Youtube" xmlns:mx="library://ns.adobe.com/flex/mx" >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<!--<s:HTTPService id="rssParse" result="rssParse_resultHandler(event)" method="GET" resultFormat="xml" >
			
		</s:HTTPService>-->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import flash.events.Event;
			
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			
			import spark.components.Application;
			import spark.events.IndexChangeEvent;
			
			import ytfeeds.SimpleFeedGrabberExample;
			import mx.controls.SWFLoader;
			import mx.core.FlexGlobals;
			
			/********** VARIABLES **********/
			[Bindable]
			private var simpleFeedGrabberExample:SimpleFeedGrabberExample = new SimpleFeedGrabberExample();
			[Bindable]
			
			
			public var _selectedID:String = "";
			protected var loader:Loader;
			protected var player:Object;
			private var swfLoader:SWFLoader;
			
			/********** INIT **********/
			public function init():void {
				trace('init');
				searchTerms.addEventListener(FlexEvent.ENTER, doSearch);
				simpleFeedGrabberExample = new SimpleFeedGrabberExample();
				simpleFeedGrabberExample.loadMostViewed();
				
				loader  = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.INIT, onLoaderInit);
				loader.load(new URLRequest("http://www.youtube.com/apiplayer?version=3")); 
			}
			
			/********** TAB BUTTON PRESSED **********/
			/**
			 *  Player init event handler
			 */
			protected function onLoaderInit(event:Event):void {
				
				// Set the YouTube Player listeners
				// More info: http://code.google.com/apis/youtube/flash_api_reference.html#Events
				loader.content.addEventListener("onReady", onPlayerReady);
				loader.content.addEventListener("onError", onPlayerError);
				loader.content.addEventListener("onStateChange", onPlayerStateChange);
			}
			
			/**
			 * On Player Ready
			 * This event is fired when the player is loaded and initialized, meaning it is ready to receive API calls.
			 */
			protected function onPlayerReady(event:Event):void {
				
				player = loader.content;
				
				// Set the Player size 
				player.setSize(this.stage.stageWidth, 
					this.stage.stageHeight - FlexGlobals.topLevelApplication.actionBar.height );
				
				// Display the YouTubePlayer into an SWFLoader
				/* swfLoader = new SWFLoader(); 
				swfLoader.autoLoad = true;
				swfLoader.setStyle("backgroundColor", 0x333333)
				swfLoader.scaleContent = true;
				swfLoader.maintainAspectRatio = true;
				addElement(swfLoader)	 */	
				ytloader.autoLoad = true;
				ytloader.scaleContent = true;
				ytloader.maintainAspectRatio = true;
				ytloader.load(player);
				
				
				
				// Play the Video
				// The property 'data' contains the video ID passed  
				// from the HomeView (i.e. "LDfM5c0ZKOw")
				playVideo(data as String);
			}
			
			/**
			 * Video Player Stage Change
			 * This event is fired whenever the player's state changes. 
			 * Possible values are unstarted (-1), ended (0), playing (1),
			 * paused (2), buffering (3), video cued (5). 
			 * When the SWF is first loaded it will broadcast an unstarted (-1) event. 
			 * When the video is cued and ready to play it will broadcast a video cued event (5).
			 */
			protected function onPlayerStateChange(event:Event):void {
				trace("Player state changed:", Object(event).data);
				
				switch (Object(event).data) {
					
					
					// STOP
					case -1:
						// do nothing
						break;
					
					// end
					case 0:
						// do nothing
						break;
					
					// play
					case 1:
						// do nothing
						break;
					
					// PAUSED
					case 2:
						// do nothing
						break;
					
					// BUFFERING
					case 3:
						// do nothing
						break;
					
					
				}
				
				
			}
			
			/**
			 * Video Player Error event handler
			 * This event is fired when an error in the player occurs.
			 */
			protected function onPlayerError(event:Event):void {
				trace("Player error:", Object(event).data);
			}
			
			/**
			 * Play Video
			 * @param	videoID		The YouTube video ID to play
			 */
			public function playVideo(videoID:String) : void
			{
				
				// Loads the specified video's thumbnail 
				// and prepares the player to play the video
				player.cueVideoById(videoID);
				
				// You can also use:
				// loadVideoById
				// cueVideoByUrl
				
				// More info: 
				// http://code.google.com/apis/youtube/flash_api_reference.html#Functions
				
			}
			
			/**
			 * Dispose
			 * Help garbage collector to remove everything from memory
			 */
			public function dispose():void {
				
				loader.contentLoaderInfo.removeEventListener(Event.INIT, onLoaderInit);
				loader.content.removeEventListener("onReady", onPlayerReady);
				loader.content.removeEventListener("onError", onPlayerError);
				loader.content.removeEventListener("onStateChange", onPlayerStateChange);
				
				
				try {
					
					player.stopVideo();
					
					// More info: http://code.google.com/apis/youtube/flash_api_reference.html#SpecialFunctions
					player.destroy();
				} catch (e:Error) { trace("error")}
				
				
				removeElement(swfLoader)
				swfLoader = null;
				player = null;
				
				loader.unload();
				loader = null;
			}
			
			
			
			/********** DO SEARCH **********/
			public function doSearch (event:Event):void {
				
				
			}
			
			/********** GET SELECTED ID **********/
			[Bindable]
			public function get selectedID():String {
				return _selectedID;
			}
			
			/********** SET SELECTED ID **********/
			public function set selectedID(id:String):void {
				_selectedID = id;
				//===--- quick hack to simplfy integration with otoh player
				/* try {Application.application.video.text = id;}catch (e:Error){} */
			
			}
			
			
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				simpleFeedGrabberExample.loadSearch(searchTerms.text);
				
			}
			
			protected function itemsList_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				selectedID = itemsList.selectedItem.urlID;
				playVideo(selectedID);
			}
			
		]]>
	</fx:Script>
	
	
		
			
			<s:HGroup width="422" height="46">
				<s:TextInput id="searchTerms" width="268" height="44" maxChars="30"
							 restrict="A-Z a-z 012345689" text="Search"/> 
				<s:Label text=" ID: {selectedID}"/>
			</s:HGroup>
			
		
		<s:List id="itemsList" x="10" y="396" width="460" height="213"
				dataProvider="{simpleFeedGrabberExample.ytVideoDetailsArrayCollection}"
				itemRenderer="views.YoutubeThumbnail1" change="itemsList_changeHandler(event)" />
	<s:Button x="5" y="54" label="Search" click="button1_clickHandler(event)" />
		
	<s:SWFLoader id="ytloader" x="10" y="128" width="460" height="260">
		
	</s:SWFLoader>
		
	
</s:View>
