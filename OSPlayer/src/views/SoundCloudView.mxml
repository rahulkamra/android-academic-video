<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="SoundCloud" viewActivate="view1_viewActivateHandler(event)" viewDeactivate="view1_viewDeactivateHandler(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			//Importing Flex LIbraries
			import com.adobe.serialization.json.JSON;
			import mx.collections.ArrayCollection;
			import org.osmf.media.MediaElement;
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			
			/********** VARIABLES **********/
			private var loader:URLLoader;
			private var sndd:Sound;
			private var sndch:SoundChannel;
			private var pausePosition:int = -1;
			[Bindable]
			private var arrcoll:ArrayCollection;
			
			
			protected function view1_viewActivateHandler(event:ViewNavigatorEvent):void
			{
				// Prevents the system from dropping into an idle mode.
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
				
			}
			
			//Initiates the Search for entered text on SoundCloud server
			/********** Search Button click Handler **********/
			protected function button1_clickHandler(event:MouseEvent):void
			{
				//Loading web request and initiating event listeners for Loader object
				loader = new URLLoader();
				configureListeners(loader);
				var reqStr:String = "http://api.soundcloud.com/tracks.json?client_id=60d657d56f451db6a5c71547606385a7&limit=30&q=" + scSearch.text;
				var request:URLRequest = new URLRequest(reqStr);
				loader.load(request);
			}
			
			//Initializes the Listener methods for Web request Loader object
			/********** Web request event Listener Initializer **********/
			private function configureListeners(dispatcher:IEventDispatcher):void 
			{
				dispatcher.addEventListener(Event.COMPLETE, completeHandler);
				dispatcher.addEventListener(Event.OPEN, openHandler);
				dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
				dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
				dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
			}
			
			//Listens for web request completed event
			/********** Web request completed event Handler **********/
			private function completeHandler(event:Event):void 
			{
				//Sets a global array collection object with returned search results
				var arr:Array = (JSON.decode(loader.data) as Array);
				arrcoll = new ArrayCollection(arr);
			}
			
			private function openHandler(event:Event):void 
			{
				
			}
			
			private function progressHandler(event:ProgressEvent):void 
			{
				
			}
			
			private function securityErrorHandler(event:SecurityErrorEvent):void 
			{
				
			}
			
			private function httpStatusHandler(event:HTTPStatusEvent):void 
			{
				
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void 
			{
				
			}
			protected function itemsList_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
			}
			
			//To play the audio 
			/*** Play Button click Handler ***/
			protected function button2_clickHandler(event:MouseEvent):void
			{
				var strmm:String;
				var urlreq:URLRequest;
				//Below code fetches the song ID of selected song from search result list
				//Then Selected song ID is used to fetch and stream the selected song 
				if(pausePosition == -1)
				{	
					strmm= itemsList.selectedItem.stream_url + "?oauth_consumer_key=60d657d56f451db6a5c71547606385a7"; 
					urlreq = new URLRequest(strmm);
					sndd= new Sound();
					sndd.load(urlreq, new SoundLoaderContext(1000));
					sndch= sndd.play();
					pausePosition = 1;
				}
				else if(pausePosition == 1)
				{
					sndch.stop();
					sndd.close();
					strmm= itemsList.selectedItem.stream_url + "?oauth_consumer_key=60d657d56f451db6a5c71547606385a7"; 
					urlreq = new URLRequest(strmm);
					sndd= new Sound();
					sndd.load(urlreq, new SoundLoaderContext(1000));
					sndch= sndd.play();
					pausePosition = 1;
				}	
				else
				{
					sndch = sndd.play(pausePosition);
					pausePosition = -1;
				}
			}
			
			//To pause the video 
			/*** Pause Button click Handler ***/
			protected function button3_clickHandler(event:MouseEvent):void
			{
				pausePosition = sndch.position;
				sndch.stop();
			}
			
			//To Stop the video 
			/*** Stop Button click Handler ***/
			protected function button4_clickHandler(event:MouseEvent):void
			{
				sndch.stop();
				sndd.close();
			}
			
			//This method gets called when we switch back to any other view. Initiates cleanup operations
			/*** Back To Home ***/
			protected function view1_viewDeactivateHandler(event:ViewNavigatorEvent):void
			{
				sndch.stop();
				sndd.close();
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.NORMAL;
			}
				
		]]>
	</fx:Script>
	<s:TextInput id="scSearch" x="11" y="10" width="346" height="42"/>
	<s:Button x="365" y="11" height="41" label="Search" click="button1_clickHandler(event)"/>
	<s:List id="itemsList" x="11" y="73" width="460" height="461"
			dataProvider="{arrcoll}"
			itemRenderer="views.SoundCloudThumbnail" change="itemsList_changeHandler(event)"  />
	<s:Button x="101" y="553" height="47" label="Play" click="button2_clickHandler(event)"/>
	<s:Button x="188" y="553" height="47" label="Pause" click="button3_clickHandler(event)"/>
	<s:Button x="296" y="553" height="47" label="Stop" click="button4_clickHandler(event)"/>
</s:View>
