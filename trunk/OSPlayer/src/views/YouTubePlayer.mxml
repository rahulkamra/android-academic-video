<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		title="Youtube"
		viewActivate="init()" viewDeactivate="dispose()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.controls.SWFLoader;
			import mx.core.FlexGlobals;
			
			protected var loader:Loader;
			protected var player:Object;
			private var swfLoader:SWFLoader;
			
			
			/**
			 * Init
			 */
			public function init():void
			{
				//Enable Auto orientation for Video space
				stage.autoOrients = true;
				
				// If the stage is resized/orientation changed - explained below.
				stage.addEventListener( Event.RESIZE, onStageResize );
				
				// Called to set the viewPort for the _stageWebView the first time
				onStageResize();
				
				// Prevents the system from dropping into an idle mode.
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
				
				// Loads a chromeless YouTubePlayer player 
				loader  = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.INIT, onLoaderInit);
				loader.load(new URLRequest("http://www.youtube.com/apiplayer?version=3"));   
				
			}
			
			private function onStageResize( e:Event=null ):void {
				
				//Below code handles the resizing of video player space on changing to horizontal or vertical orientation
				if(stage.orientation == StageOrientation.ROTATED_LEFT || stage.orientation == StageOrientation.ROTATED_RIGHT)
				{
					this.tabBarVisible = false;
					this.actionBarVisible = false;
					if(player!=null)
						player.setSize(stage.stageWidth,stage.stageHeight );
					
				}
				else
				{
					this.tabBarVisible = true;
					this.actionBarVisible = true;
					if(player!=null)
						player.setSize(stage.stageWidth,300 );
				}
			}
						
			/***  Player init event handler ***/
			protected function onLoaderInit(event:Event):void {
				
				// Below code to Set the YouTube Player listeners
				loader.content.addEventListener("onReady", onPlayerReady);
				loader.content.addEventListener("onError", onPlayerError);
				loader.content.addEventListener("onStateChange", onPlayerStateChange);
			}
			
			//* This event is fired when the player is loaded and initialized, meaning it is ready to receive API calls.
			/*** On Player Ready ***/
			protected function onPlayerReady(event:Event):void {
				
				player = loader.content;
				
				// Set the Player size 
				player.setSize(this.width, 
					300);
				
				// Display the YouTubePlayer into an SWFLoader
				swfLoader = new SWFLoader(); 
				swfLoader.autoLoad = true;
				swfLoader.setStyle("backgroundColor", 0x333333)
				swfLoader.scaleContent = true;
				swfLoader.maintainAspectRatio = true;
				addElement(swfLoader)				
				swfLoader.load(player);
				
				// Play the Video
				// The property 'data' contains the video ID passed from the YoutubeView
				playVideo(data as String);
			}
						
			//This event is fired whenever the player's state changes. 
			//Possible values are unstarted (-1), ended (0), playing (1),
			//paused (2), buffering (3), video cued (5). 
			//When the SWF is first loaded it will broadcast an unstarted (-1) event. 
			//When the video is cued and ready to play it will broadcast a video cued event (5).
			/*** Video Player Stage Change ***/
			protected function onPlayerStateChange(event:Event):void {
				
				
				switch (Object(event).data) {
					
					
					// STOP
					case -1:
						// do nothing
						break;
					
					// end
					case 0:
						// do nothing
						break;
					
					// play
					case 1:
						// do nothing
						break;
					
					// PAUSED
					case 2:
						// do nothing
						break;
					
					// BUFFERING
					case 3:
						// do nothing
						break;
					
					
				}
				
				
			}

			//This event is fired when an error in the player occurs.
			/*** Video Player Error event handler ***/
			protected function onPlayerError(event:Event):void {
				
			}

			//This method uses the YouTube video ID to play the video
			/*** Play Video ***/
			public function playVideo(videoID:String) : void
			{
				// Loads the specified video's thumbnail 
				// and prepares the player to play the video
				player.cueVideoById(videoID);
			}
						
			// This is the garbage collector method to remove everything from memory
			/*** Dispose ***/
			public function dispose():void {
				
				loader.contentLoaderInfo.removeEventListener(Event.INIT, onLoaderInit);
				loader.content.removeEventListener("onReady", onPlayerReady);
				loader.content.removeEventListener("onError", onPlayerError);
				loader.content.removeEventListener("onStateChange", onPlayerStateChange);
				
				try {
					
					player.stopVideo();
				//Destroys the player object. Youtube API method
					player.destroy();
				} catch (e:Error) { }
				
				
				removeElement(swfLoader)
				swfLoader = null;
				player = null;
				
				loader.unload();
				loader = null;
			}
						
			//This method gets called when we switch back to any other view. Initiates cleanup operations
			/*** Back To Home ***/
			private function backToHome():void {
				
				dispose();
				// Enable the system to dropping into an idle mode.
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.NORMAL;
				
			}
			
			//To play the video 
			/*** Play Button click Handler ***/
			protected function button2_clickHandler(event:MouseEvent):void
			{
				player.playVideo();
			}
			
			//To pause the video 
			/*** Pause Button click Handler ***/
			protected function button3_clickHandler(event:MouseEvent):void
			{
				player.pauseVideo();
			}
			
			//To Stop the video 
			/*** Stop Button click Handler ***/
			protected function button4_clickHandler(event:MouseEvent):void
			{
				player.seekTo(0,false);
				player.stopVideo();
				
			}
			
		]]>
	</fx:Script>
	<s:Group x="10" y="10" width="460" height="526">
	</s:Group>
	<s:Button x="101" y="562" height="47" label="Play" click="button2_clickHandler(event)"/>
	<s:Button x="188" y="562" height="47" label="Pause" click="button3_clickHandler(event)"/>
	<s:Button x="296" y="562" height="47" label="Stop" click="button4_clickHandler(event)"/>
</s:View>
